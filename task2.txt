How to store a number in memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
for a integer let n=5,in the memory it is represented as :

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1
D31........................................................D1 D0


The rightmost bit (the so-called least signifcant bit)as D0, the bit to the left of it as D1
and the leftmost (most signicant) bit being labelled as D31.


-----------------------------------------------------------------------------------

BITWISE AND , OR and XOR
~~~~~~~~~~~~~~~~~~~~~~~~~~

#include <stdio.h>          
int main()                  
{                           
int n = 8;
int m = 9;
printf("%d", n & m);
return 0;
}

this is the AND operation for which the output was 8.

n=00001000
m=00001001
-------------
  00001000      = 8
  
  
  
  #include <stdio.h>          
int main()                  
{                           
int n = 8;
int m = 9;
printf("%d", n | m);
return 0;
}

this is the OR operation for which the ouput was 9.

n=00001000
m=00001001
----------
  00001001     = 9
  
  
  #include <stdio.h>          
int main()                  
{                           
int n = 8;
int m = 9;
printf("%d", n ^ m);
return 0;
}

this is the XOR operation for which the output was 1.

n=00001000
m=00001001
----------
  00000001   =  1
  
  
-------------------------------------------------------------------------------
THE LEFT SHIFT
~~~~~~~~~~~~~~~

#include <stdio.h>
int main()
{
int i = 1;
printf("%d\n", i << 1);
printf("%d\n", i);
}


The << operator performs what is called a left shift .
FOR i =1
the binary representation is
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1

{

so after left shift,i.e i<<1
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0     = 2

for i<<2
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0     = 4

for i<<3
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0     = 8

for i<<4
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0     = 16

}

This is what the left shift does; it deletes the leftmost bit (bit D31) and moves
each of the remaining bits to the left. Now, the rightmost position will be vacant
because all the bits have moved left by one position. This vacant spot is filled
with a zero.
----------------------------------------------------------------------------------------------------
THE RIGHT SHIFT
~~~~~~~~~~~~~~~

#include <stdio.h>
int main()
{
unsigned int i = 2;
printf("%d\n", i >> 1);
}

THE BIT REPRESENTATION OF i=2
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
so after i >>1

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1    = 1

The right shift operation results in the rightmost bit (bit D0) getting deleted and each bit moving to the right by one position. 
The vacated bit position (at the extreme left) is filled with zero.

The right shift is equivalent to integer division by 2.
------------------------------------------------------------------------------------------------------------
BIT WISE ONES COMPLIMENT
~~~~~~~~~~~~~~~~~~~~~~~~

#include <stdio.h>
int main()
{
int i = 0;
printf("%d\n", ~i);
}

bit wise ones complement of 0 is -1

--------------------------------------------------------------------------------------

IDENTITIES
`~~~~~~~~~~~
If the symbol b represents a single bit (whose value can be either 1 or 0), the
following simple identities are true:
1. b & 1 = b (if b is 0, the result is 0; if b is 1, the result is 1)
2. b & 0 = 0
3. b | 0 = b
4. b | 1 = 1
5. b ^ 1 = complement of b
6. b ^ b = 0

example 3 solu:


#include <stdio.h>
int main()
{
int n;
scanf("%d", &n);
printf("%d\n", (1<<i)|n);
}


example 4 solu:

#include <stdio.h>
int main()
{
int n ;
int i;
scanf("%d%d",&n,&i);
printf("%d\n",(~(1<<i))&n);
}

example 5 solu:

#include <stdio.h>
int main()
{
int n ;
int m;
scanf("%d%d",&n,&m);
printf("%d\n",(~((~0)<<m))&n);
}





